import tensorflow as tf

from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("E:\Term 3\Ad Machine Learning\MNIST_data/", one_hot=True)

type(mnist)

mnist.train.images

mnist.train.num_examples

mnist.test.num_examples

mnist.validation.num_examples

################### Data Visualization

import matplotlib.pyplot as plt

%matplotlib inline

mnist.train.images[10].shape

plt.imshow(mnist.train.images[10].reshape(28,28))

plt.imshow(mnist.train.images[10].reshape(28,28),cmap = 'Blues_r')


################# Create a model

x = tf.placeholder(tf.float32,shape=[None,784])

W = tf.Variable(tf.zeros([784,10]))

b = tf.Variable(tf.zeros([10]))


y = tf.matmul(x,W) + b

### loss Optimizer

y_true = tf.placeholder(tf.float32,[None,10])

## cross Entropy

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y))


optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5)


train = optimizer.minimize(cross_entropy)


###############  Create Session

init = tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    
    # train the model for 1000 steps on the training sey
    # using build in batch feeder from mnist for convenience
    for step in range(1000):
        
        batch_x, batch_y = mnist.train.next_batch(100)
        
        sess.run(train,feed_dict={x:batch_x,y_true:batch_y})
    
    ## test the train model    
    matches = tf.equal(tf.argmax(y,1),tf.argmax(y_true,1))
    
    acc = tf.reduce_mean(tf.cast(matches,tf.float32))
    
    print(sess.run(acc,feed_dict={x:mnist.test.images,y_true:mnist.test.labels}))
    
    
